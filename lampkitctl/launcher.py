from __future__ import annotations

"""Helpers to manage a sudo-accessible launcher shim."""

import os
import stat
import sys
from pathlib import Path

from .elevate import resolve_self_executable

DEFAULT_PATHS = [
    Path("/opt/homebrew/bin"),
    Path("/usr/local/bin"),
]

LAUNCHER_NAME = "lampkitctl"

BASH_TEMPLATE = """#!/usr/bin/env bash
# Auto-generated by lampkitctl install-launcher
TARGET={target!r}
if [ ! -x "$TARGET" ]; then
  echo "lampkitctl launcher target not found or not executable: $TARGET" >&2
  echo "Recreate the launcher via: lampkitctl install-launcher" >&2
  exit 127
fi
exec "$TARGET" "$@"
"""


def find_install_dir(preferred: str | None = None) -> Path:
    """Return the directory where the launcher should be installed.

    The function prefers a user-specified directory and falls back to
    common system locations that are typically visible to ``sudo``.
    """

    if preferred:
        return Path(preferred)

    for p in DEFAULT_PATHS:
        try:
            if p.exists() and os.access(p, os.W_OK):
                return p
        except Exception:  # pragma: no cover - defensive
            continue

    for p in DEFAULT_PATHS:
        if p.exists():
            return p

    return Path("/usr/local/bin")


def install_launcher(preferred_dir: str | None = None, force: bool = False) -> Path:
    """Create a sudo-visible launcher that forwards to the venv script.

    Args:
        preferred_dir: Optional directory to install the launcher in.
        force: Overwrite existing launcher if present.

    Returns:
        The path to the created launcher.
    """

    exe = resolve_self_executable()
    if not exe:
        module_cmd = f"{sys.executable} -m lampkitctl"
        raise SystemExit(
            f"Unable to locate console script. Try running: sudo {module_cmd} install-launcher"
        )

    install_dir = find_install_dir(preferred_dir)
    install_dir.mkdir(parents=True, exist_ok=True)
    launcher_path = install_dir / LAUNCHER_NAME

    if launcher_path.exists() and not force:
        raise SystemExit(
            f"{launcher_path} already exists. Use --force to overwrite or uninstall first."
        )

    launcher_path.write_text(BASH_TEMPLATE.format(target=exe), encoding="utf-8")
    mode = os.stat(launcher_path).st_mode
    os.chmod(launcher_path, mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
    return launcher_path


def uninstall_launcher(preferred_dir: str | None = None) -> Path:
    """Remove the previously installed launcher if it exists."""

    install_dir = find_install_dir(preferred_dir)
    launcher_path = install_dir / LAUNCHER_NAME
    if launcher_path.exists():
        launcher_path.unlink()
    return launcher_path
